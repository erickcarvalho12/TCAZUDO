"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const standalone_1 = require("@adonisjs/auth/build/standalone");
class AuthMiddleware {
    constructor() {
        this.redirectTo = '/login';
    }
    async authenticate(auth, guards) {
        let guardLastAttempted;
        for (let guard of guards) {
            guardLastAttempted = guard;
            if (await auth.use(guard).check()) {
                auth.defaultGuard = guard;
                return true;
            }
        }
        throw new standalone_1.AuthenticationException('Unauthorized access', 'E_UNAUTHORIZED_ACCESS', guardLastAttempted, this.redirectTo);
    }
    async handle({ auth }, next, customGuards) {
        const guards = customGuards.length ? customGuards : [auth.name];
        await this.authenticate(auth, guards);
        await next();
    }
}
exports.default = AuthMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxnRUFBeUU7QUFTekUsTUFBcUIsY0FBYztJQUFuQztRQUlZLGVBQVUsR0FBRyxRQUFRLENBQUE7SUF3RGpDLENBQUM7SUE5Q1csS0FBSyxDQUFDLFlBQVksQ0FBRSxJQUFpQyxFQUFFLE1BQTRCO1FBTzNGLElBQUksa0JBQXNDLENBQUE7UUFFMUMsS0FBSyxJQUFJLEtBQUssSUFBSSxNQUFNLEVBQUU7WUFDeEIsa0JBQWtCLEdBQUcsS0FBSyxDQUFBO1lBRTFCLElBQUksTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQU1qQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQTtnQkFDekIsT0FBTyxJQUFJLENBQUE7YUFDWjtTQUNGO1FBS0QsTUFBTSxJQUFJLG9DQUF1QixDQUMvQixxQkFBcUIsRUFDckIsdUJBQXVCLEVBQ3ZCLGtCQUFrQixFQUNsQixJQUFJLENBQUMsVUFBVSxDQUNoQixDQUFBO0lBQ0gsQ0FBQztJQUtNLEtBQUssQ0FBQyxNQUFNLENBQUUsRUFBRSxJQUFJLEVBQXVCLEVBQUUsSUFBeUIsRUFBRSxZQUFrQztRQUsvRyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQy9ELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDckMsTUFBTSxJQUFJLEVBQUUsQ0FBQTtJQUNkLENBQUM7Q0FDRjtBQTVERCxpQ0E0REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHdWFyZHNMaXN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQWRkb25zL0F1dGgnXHJcbmltcG9ydCB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xyXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbkV4Y2VwdGlvbiB9IGZyb20gJ0BhZG9uaXNqcy9hdXRoL2J1aWxkL3N0YW5kYWxvbmUnXHJcblxyXG4vKipcclxuICogQXV0aCBtaWRkbGV3YXJlIGlzIG1lYW50IHRvIHJlc3RyaWN0IHVuLWF1dGhlbnRpY2F0ZWQgYWNjZXNzIHRvIGEgZ2l2ZW4gcm91dGVcclxuICogb3IgYSBncm91cCBvZiByb3V0ZXMuXHJcbiAqXHJcbiAqIFlvdSBtdXN0IHJlZ2lzdGVyIHRoaXMgbWlkZGxld2FyZSBpbnNpZGUgYHN0YXJ0L2tlcm5lbC50c2AgZmlsZSB1bmRlciB0aGUgbGlzdFxyXG4gKiBvZiBuYW1lZCBtaWRkbGV3YXJlLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0aE1pZGRsZXdhcmUge1xyXG4gIC8qKlxyXG4gICogVGhlIFVSTCB0byByZWRpcmVjdCB0byB3aGVuIHJlcXVlc3QgaXMgVW5hdXRob3JpemVkXHJcbiAgKi9cclxuICBwcm90ZWN0ZWQgcmVkaXJlY3RUbyA9ICcvbG9naW4nXHJcblxyXG4gIC8qKlxyXG4gICAqIEF1dGhlbnRpY2F0ZXMgdGhlIGN1cnJlbnQgSFRUUCByZXF1ZXN0IGFnYWluc3QgYSBjdXN0b20gc2V0IG9mIGRlZmluZWRcclxuICAgKiBndWFyZHMuXHJcbiAgICpcclxuICAgKiBUaGUgYXV0aGVudGljYXRpb24gbG9vcCBzdG9wcyBhcyBzb29uIGFzIHRoZSB1c2VyIGlzIGF1dGhlbnRpY2F0ZWQgdXNpbmcgYW55XHJcbiAgICogb2YgdGhlIG1lbnRpb25lZCBndWFyZHMgYW5kIHRoYXQgZ3VhcmQgd2lsbCBiZSB1c2VkIGJ5IHRoZSByZXN0IG9mIHRoZSBjb2RlXHJcbiAgICogZHVyaW5nIHRoZSBjdXJyZW50IHJlcXVlc3QuXHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGFzeW5jIGF1dGhlbnRpY2F0ZSAoYXV0aDogSHR0cENvbnRleHRDb250cmFjdFsnYXV0aCddLCBndWFyZHM6IChrZXlvZiBHdWFyZHNMaXN0KVtdKSB7XHJcbiAgICAvKipcclxuICAgICAqIEhvbGQgcmVmZXJlbmNlIHRvIHRoZSBndWFyZCBsYXN0IGF0dGVtcHRlZCB3aXRoaW4gdGhlIGZvciBsb29wLiBXZSBwYXNzXHJcbiAgICAgKiB0aGUgcmVmZXJlbmNlIG9mIHRoZSBndWFyZCB0byB0aGUgXCJBdXRoZW50aWNhdGlvbkV4Y2VwdGlvblwiLCBzbyB0aGF0XHJcbiAgICAgKiBpdCBjYW4gZGVjaWRlIHRoZSBjb3JyZWN0IHJlc3BvbnNlIGJlaGF2aW9yIGJhc2VkIHVwb24gdGhlIGd1YXJkXHJcbiAgICAgKiBkcml2ZXJcclxuICAgICAqL1xyXG4gICAgbGV0IGd1YXJkTGFzdEF0dGVtcHRlZDogc3RyaW5nIHwgdW5kZWZpbmVkXHJcblxyXG4gICAgZm9yIChsZXQgZ3VhcmQgb2YgZ3VhcmRzKSB7XHJcbiAgICAgIGd1YXJkTGFzdEF0dGVtcHRlZCA9IGd1YXJkXHJcblxyXG4gICAgICBpZiAoYXdhaXQgYXV0aC51c2UoZ3VhcmQpLmNoZWNrKCkpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbnN0cnVjdCBhdXRoIHRvIHVzZSB0aGUgZ2l2ZW4gZ3VhcmQgYXMgdGhlIGRlZmF1bHQgZ3VhcmQgZm9yXHJcbiAgICAgICAgICogdGhlIHJlc3Qgb2YgdGhlIHJlcXVlc3QsIHNpbmNlIHRoZSB1c2VyIGF1dGhlbnRpY2F0ZWRcclxuICAgICAgICAgKiBzdWNjZWVkZWQgaGVyZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGF1dGguZGVmYXVsdEd1YXJkID0gZ3VhcmRcclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVbmFibGUgdG8gYXV0aGVudGljYXRlIHVzaW5nIGFueSBndWFyZFxyXG4gICAgICovXHJcbiAgICB0aHJvdyBuZXcgQXV0aGVudGljYXRpb25FeGNlcHRpb24oXHJcbiAgICAgICdVbmF1dGhvcml6ZWQgYWNjZXNzJyxcclxuICAgICAgJ0VfVU5BVVRIT1JJWkVEX0FDQ0VTUycsXHJcbiAgICAgIGd1YXJkTGFzdEF0dGVtcHRlZCxcclxuICAgICAgdGhpcy5yZWRpcmVjdFRvLFxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGFuZGxlIHJlcXVlc3RcclxuICAgKi9cclxuICBwdWJsaWMgYXN5bmMgaGFuZGxlICh7IGF1dGggfTogSHR0cENvbnRleHRDb250cmFjdCwgbmV4dDogKCkgPT4gUHJvbWlzZTx2b2lkPiwgY3VzdG9tR3VhcmRzOiAoa2V5b2YgR3VhcmRzTGlzdClbXSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VzIHRoZSB1c2VyIGRlZmluZWQgZ3VhcmRzIG9yIHRoZSBkZWZhdWx0IGd1YXJkIG1lbnRpb25lZCBpblxyXG4gICAgICogdGhlIGNvbmZpZyBmaWxlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IGd1YXJkcyA9IGN1c3RvbUd1YXJkcy5sZW5ndGggPyBjdXN0b21HdWFyZHMgOiBbYXV0aC5uYW1lXVxyXG4gICAgYXdhaXQgdGhpcy5hdXRoZW50aWNhdGUoYXV0aCwgZ3VhcmRzKVxyXG4gICAgYXdhaXQgbmV4dCgpXHJcbiAgfVxyXG59XHJcbiJdfQ==